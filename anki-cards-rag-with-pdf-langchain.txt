'''LangChain 0.2 release date; October 2023'''
'''Key features of LangChain v0.2; Pydantic compatibility, security updates, tutorials, and guides for RAG applications'''
'''Purpose of RAG applications; To show users the sources used to generate answers in Q&A applications'''
'''Approaches to return sources in RAG applications; Using create_retrieval_chain and implementing a simple LCEL (LangChain Execution Language)'''
'''Dependency to install for LangChain walkthrough; langchain, langchain-community, langchainhub, langchain-openai, langchain-chroma, beautifulsoup4'''
'''How to set environment variable for OpenAI API Key; Use os.environ["OPENAI_API_KEY"] = getpass.getpass()'''
'''Function of LangSmith in LangChain applications; It helps in inspecting the operations inside the chain or agent, especially in complex applications'''
'''Steps to enable LangSmith; Set environment variables LANGCHAIN_TRACING_V2 = "true" and LANGCHAIN_API_KEY'''
'''How to select a language model in LangChain; By using the appropriate pip install command and setting the environment variable for OpenAI API Key'''
'''Code snippet to create a Q&A app with sources; Import necessary modules, load documents, split text, create retriever, and build a question-answering chain'''
'''Role of the system prompt in LangChain; To provide context for the LLM on how to respond to questions'''
'''Key method to call in LangChain for Q&A applications; create_retrieval_chain() and create_stuff_documents_chain()'''
'''Output of calling `rag_chain.invoke()`; A dictionary containing "input", "context", and "answer" keys'''
'''Function of `format_docs` in LCEL implementation; To format documents into a string for prompt generation'''
'''Purpose of RunnablePassthrough; It allows sequential operations on a dict, adding keys like "context" and "answer"'''
'''Importance of structured output in response; It allows the model to specify which sources were used to generate the answer'''
'''Definition of the AnswerWithSources TypedDict; A structure containing an answer and a list of sources used to answer a question'''
'''Difference in rag_chain_from_docs for structured output; It uses `.with_structured_output` to specify the desired output type'''
'''Typical output format after invoking the final RAG chain; A JSON containing the answer and the sources used, featuring indentation for clarity'''
